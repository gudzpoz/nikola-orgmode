This plugin implements an [[https://orgmode.org/][Emacs Org-mode]] based compiler for [[https://getnikola.com/][Nikola]].

This repository holds a fork of [[https://plugins.getnikola.com/v8/orgmode/][the original plugin]] that contains various fixes
and personal customizations. The [[file:init-experimental.el][=init-experimental.el=]] file is directly tangled
from my blog post [[https://kyo.iroiro.party/posts/org-mode-for-nikola-blogging/][在 Nikola 里使用 Org-mode 撰写博客]] (in Chinese) with code
comments mostly in English. (It also includes [[https://kyo.iroiro.party/posts/org-mode-for-nikola-blogging/#footnotes][an example GitHub workflow
config]].)

* Features

A short list of extra features:

- Optimized for building with GitHub actions

  - By default, we don't evaluate [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] code blocks at build time so that
    you don't need to clone your Emacs configuration during GitHub workflows.

  - You can now native-compile (or byte-compile) before hand in your workflow to
    make the build a little bit faster.

- Better HTML anchor names: Org-mode by default generates randomized =id= for
  headings, and you will have different anchors every build. With
  [[https://codeberg.org/jkreeftmeijer/ox-html-stable-ids.el][ox-html-stable-ids]], now we can have constant & human-readable IDs.

  - For headings, the anchors are simply generated from the text.
  - For blocks with =#+name:= attributes, the names are taken directly.

  - This also supports Chinese characters and I believe it would be quite easy
    to add non-Latin support with Quail, the Emacs built-in IME. PRs are
    welcome!

- Support for Org-native links like =[[file:other_post.org]]= and
  =[[file:../images/image.png]]=.

- Support for inline footnotes (like =[fn:note:This note is inlined.]=) and
  user-positioned footnotes. Unmodified Org-mode always gathers footnotes and
  puts them in a dedicated "Footnotes" section.

- Support for inline src blocks (like =src_elisp{1 + 1}=).

- Result blocks generated by Org Babel (annotated with =#+RESULTS:=) are now
  exported with an extra =results= CSS class. This should help you get them
  properly styled.

* Setup

Under the root directory of your Nikola blog, clone this repo into
=plugins/orgmode=:

#+begin_src sh
  git clone https://github.com/gudzpoz/nikola-orgmode plugins/orgmode
  # Alternatively, if you use git for your blog:
  git submodule add https://github.com/gudzpoz/nikola-orgmode plugins/orgmode
#+end_src

If your emacs does not ship with org-mode (>=8.x), you will have to edit the
[[file:conf.el][=init.el=]] file supplied with this plugin, and load a newer version of org-mode.

You will also need to add the orgmode compiler to your list of compilers, and
modify your POSTS & PAGES variables. (See the sample conf file provided
([[file:conf.py.sample][=conf.py.sample=]]).)

** Syntax highlighting with pygments

By default, the plugin uses =pygments= for syntax highlighting. You can disable
this by setting =nikola-use-pygments= to =nil= in your =orgconf.el= (see
[[Customization]] section below).

Nikola itself already comes with styles for pygments (via
=/assets/css/code.css=), so you probaby don't need to do anything to the
highlights working. Edit the =CODE_COLOR_SCHEME= variable in your =conf.py= to
change the theme.

* Customization

You can add any customization variables that you wish to add, to modify the
output generated by org-mode to an =orgconf.el= file outside the plugin
directory (that is, =plugins/orgconf.el= from your blog root directory).

* Teasers

You may use teasers by enabling =INDEX_TEASERS = True= in conf.py, and
use ={{{TEASER_END}}}= to generate =<!-- TEASER_END -->= in org posts.

* Image URLs

The image url in ox-html is a little fuzzy. For example, =[[/images/test.jpg]]=
will be generated as src_html{<img src="file:///images/test.jpg"
alt="test.jpg">} because the path is considered as an absolute file path.

If you add inline images with built-in file scheme to see them on your Emacs
orgmode, the references are resolved. For examples, you may refer with
=[[file:../images/test.jpg]]= to review an image stored on images directory
during writing, then it will be generated as src_html{<img src="images/test.jpg"
alt="test.jpg">}.

Alternatively, you may write =[[img-url:/images/test.jpg]]=, and then it should
be generated as src_html{<img src="/images/test.jpg" alt="test.jpg">}.

* Post References

You can use =[[file:other_post.org]]= to reference other posts just fine. (Other
suffixes like =.md= or =.rst= will also do.)
